/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Direct Print
 #	author : miyako
 #	2016/08/29
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Direct Print

		case 1 :
			PRINT_BLOB(pResult, pParams);
			break;

		case 2 :
			PRINT_BLOB_ARRAY(pResult, pParams);
			break;

	}
}

// --------------------------------- Direct Print ---------------------------------


void PRINT_BLOB(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param3;
	
	PA_Handle h = *(PA_Handle *)(pParams[1]);
	if(h)
	{
#if VERSIONWIN
		Param1.fromParamAtIndex(pParams, 1);
		
		LPTSTR printerName = Param1.getUTF16Length() ? (LPTSTR)Param1.getUTF16StringPtr() : NULL;
		HANDLE printer = NULL;
		
		BOOL success = OpenPrinter(printerName,
															 &printer,
															 NULL);
		if(success)
		{
			DOC_INFO_1 docInfo;
			docInfo.pDocName = L"DOCUMENT";
			docInfo.pOutputFile = NULL;
			docInfo.pDatatype = L"RAW";
			DWORD printJob = StartDocPrinter(&printer, (DWORD)1, (LPBYTE)&docInfo);
			
			if(printJob)
			{				
					LPVOID buf = (LPVOID)PA_LockHandle(h);
					DWORD len = PA_GetHandleSize(h);
					DWORD written = 0;
					success = WritePrinter(&printer,
																 buf,
																 len,
																 &written);
					
					if(!success)
					{
						Param3.setIntValue(ERR_WRITE_PRINTER);
					}
					
					PA_UnlockHandle(h);
				
				success = EndDocPrinter(&printer);
				
				if(!success)
				{
					Param3.setIntValue(ERR_END_DOC_PRINTER);
				}
				
			}else{
				Param3.setIntValue(ERR_START_DOC_PRINTER);
			}
			
		}else{
			Param3.setIntValue(ERR_OPEN_PRINTER);
		}
#endif
	}

	Param3.toParamAtIndex(pParams, 3);
}

void PRINT_BLOB_ARRAY(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param3;

	PA_Variable arr = *((PA_Variable*) pParams[1]);
	
	if(&arr)
	{
		if(PA_IsArrayVariable(&arr))
		{
			if(arr.fType == eVK_ArrayBlob)
			{
#if VERSIONWIN
				Param1.fromParamAtIndex(pParams, 1);
				
				LPTSTR printerName = Param1.getUTF16Length() ? (LPTSTR)Param1.getUTF16StringPtr() : NULL;
				HANDLE printer = NULL;
				
				BOOL success = OpenPrinter(printerName,
																	 &printer,
																	 NULL);
				if(success)
				{
					DOC_INFO_1 docInfo;
					docInfo.pDocName = L"DOCUMENT";
					docInfo.pOutputFile = NULL;
					docInfo.pDatatype = L"RAW";
					DWORD printJob = StartDocPrinter(&printer, (DWORD)1, (LPBYTE)&docInfo);
					
					if(printJob)
					{
						PA_long32 size = PA_GetArrayNbElements(arr);
						for(PA_long32 i = 1; i <= size; ++i)
						{
							PA_Blob blob = PA_GetBlobInArray(arr, i);
							LPVOID buf = (LPVOID)PA_LockHandle(blob.fHandle);
							
							DWORD len = blob.fSize;
							DWORD written = 0;
							success = WritePrinter(&printer,
																		 buf,
																		 len,
																		 &written);
							
							if(!success)
							{
								Param3.setIntValue(ERR_WRITE_PRINTER);
							}
							
							PA_UnlockHandle(blob.fHandle);
						}
						
						success = EndDocPrinter(&printer);
						
						if(!success)
						{
							Param3.setIntValue(ERR_END_DOC_PRINTER);
						}
						
					}else{
						Param3.setIntValue(ERR_START_DOC_PRINTER);
					}
					
				}else{
					Param3.setIntValue(ERR_OPEN_PRINTER);
				}
#endif
			}
		}
	}

	Param3.toParamAtIndex(pParams, 3);
}

